/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package presentation;

import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

import javax.swing.JOptionPane;

import bll.CovidTestBLL;
import bll.EventBLL;
import bll.EventBuilder;
import bll.FighterBLL;
import net.proteanit.sql.DbUtils;
import objects.CovidTest;
import objects.Event;
import objects.Fighter;

/**
 *
 * @author mihai
 */
public class Administrator extends javax.swing.JFrame implements Subject 
{

	public List<Forum> listOfObservers = new ArrayList <Forum>();
	int weekFlag = 0, maxFlag = 0;
	boolean allFightersTested = false;
	
	@Override
	public void registerObserver(Forum forum) {
		listOfObservers.add(forum);
		
	}

	@Override
	public void notifyObservers(String string) {
		for(Forum f : listOfObservers)
		{
			f.update(string);
		}
		
	}
	
	 public com.toedter.calendar.JDateChooser getDateChooser() {
			return dateChooser;
		}

		public void setDateChooser(com.toedter.calendar.JDateChooser dateChooser) {
			this.dateChooser = dateChooser;
		}

    /**
     * Creates new form administrator
     */
    public Administrator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        logo = new javax.swing.JLabel();
        sendInvitationsButton = new javax.swing.JButton();
        generateScheduleButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventsTable = new javax.swing.JTable();
        previousWeekButton = new javax.swing.JButton();
        nextWeekButton = new javax.swing.JButton();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        testFightersButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        generateScheduleButton.setVisible(false);
        
        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/presentation/LogoUfc.png"))); // NOI18N

        sendInvitationsButton.setText("Send Invitations");
        sendInvitationsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendInvitationsButtonMouseClicked(evt);
            }
        });

        generateScheduleButton.setText("Generate Schedule");
        generateScheduleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                generateScheduleButtonMouseClicked(evt);
            }
        });

        eventsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "idEvent", "location", "date", "hour", "fighterOne", "fighterTwo"
            }
        ));
        jScrollPane1.setViewportView(eventsTable);
        if (eventsTable.getColumnModel().getColumnCount() > 0) {
            eventsTable.getColumnModel().getColumn(0).setMinWidth(5);
            eventsTable.getColumnModel().getColumn(0).setPreferredWidth(5);
            eventsTable.getColumnModel().getColumn(1).setMinWidth(23);
            eventsTable.getColumnModel().getColumn(1).setPreferredWidth(23);
            eventsTable.getColumnModel().getColumn(2).setMinWidth(10);
            eventsTable.getColumnModel().getColumn(2).setPreferredWidth(10);
            eventsTable.getColumnModel().getColumn(3).setMinWidth(12);
            eventsTable.getColumnModel().getColumn(3).setPreferredWidth(12);
        }

        previousWeekButton.setText("Previous Week");
        previousWeekButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                previousWeekButtonMouseClicked(evt);
            }
        });
      
        nextWeekButton.setText("Next Week");
        nextWeekButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextWeekButtonMouseClicked(evt);
            }
        });

        jLabel1.setText("Select starting date for registration period");

        closeButton.setText("X");
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });

        testFightersButton.setText("Test Fighters");
        testFightersButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testFightersButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(736, Short.MAX_VALUE)
                .addComponent(closeButton))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(logo))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(previousWeekButton)
                        .addGap(56, 56, 56)
                        .addComponent(nextWeekButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(generateScheduleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sendInvitationsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addComponent(testFightersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(logo)
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sendInvitationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(testFightersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(generateScheduleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousWeekButton)
                    .addComponent(nextWeekButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    public int getIntRange(int start, int finish)
   	{
   	  Random rnd = new Random();
   	  int randomNumber = start + rnd.nextInt(finish + 1 - start);
   	  return randomNumber;

   	}
    
	public Date getDateRange(Date startDate, Date finishDate)
   	{
   		long startMillis = startDate.getTime();
   		long endMillis = finishDate.getTime();
   		long randomMilis = ThreadLocalRandom
   			      .current()
   			      .nextLong(startMillis, endMillis);
   		Date randomDate = new Date(randomMilis);
   		return randomDate;
   		
   	}

    private void sendInvitationsButtonMouseClicked(java.awt.event.MouseEvent evt)
    {
    	Date date = dateChooser.getDate();
    	if (date == null)
    		JOptionPane.showMessageDialog(null, "No starting date has been selected");
    	else
    	{
    		String dateString = new SimpleDateFormat("yyyy-MM-dd").format(date);
        	
        	StringBuffer message = new StringBuffer("Dear Fighters, &&"
        			+ "The UFC International commitee is happy to announce that&&"
        			+ "the annual UFC Tournament will start the registering period&&"
        			+ "with the date of " + dateString +". Because of the current  &&"
        			+ "Coronavirus pandemic, fighters are required to present &&"
        			+ "themselves at the tournament with a negative Covid Test, &&"
        			+ "where further examinations will take place.&&"
        			+ "       Thank you for your understanding and cooperation.&&"
        			+ "                                Good luck to you all !");

        	String messageString = message.toString();
            notifyObservers(messageString);
            System.out.println("Notifying observers");
            for(Forum f : listOfObservers)
            	System.out.println(f);
    	}
    	
    }                                                     

    public Date addDays(Date initialDate, int days)
   	{
   		Date newDate = new Date();
   		Calendar cal = Calendar.getInstance();
   		cal.setTime(initialDate);
   		cal.add(Calendar.DATE, days);
   		return newDate = cal.getTime();
   	}
   

	private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {                                         
      this.dispose();
    }   
		
	 private void generateScheduleButtonMouseClicked(java.awt.event.MouseEvent evt)
    {       
		 	this.weekFlag ++;
		 	EventBLL eventBLL = new EventBLL();
		 	CovidTestBLL covidTestBLL = new CovidTestBLL();
		 	Date date = this.getDateChooser().getDate();
		 	Date begginingDate = null;
		 	if(date == null)
		 		JOptionPane.showMessageDialog(null, "No starting date has been selected");
		 	else
		 	{
		 		
		 		FighterBLL fighterBLL = new FighterBLL();
			 	List<Fighter> fightersList = fighterBLL.getDAO().report();
			 	List<CovidTest> testsList = covidTestBLL.getDAO().report();
			 	ArrayList<String> secondDatesList = new ArrayList<String>();
			 	for(CovidTest ct : testsList)
			 		secondDatesList.add(ct.getSecondTestDate());
			 	Collections.sort(secondDatesList ,Collections.reverseOrder());	
			 	try {
					begginingDate = new SimpleDateFormat("yyyy-MM-dd").parse(secondDatesList.get(0));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		   		int nrOfEvents = getIntRange(2,3);
		   		System.out.println("Number of events to insert : " + nrOfEvents);
				ArrayList<String> locations = new ArrayList<String>();
				
				locations.addAll(Arrays.asList(new String[] {"Toyota Center", "PNC Arena", "TD Garden" , "Royal Arena", "The Forum"}));
				ArrayList<String> times = new ArrayList<String>();
				times.addAll(Arrays.asList(new String[] {"20:00", "20:30", "21:00", "21:30", "22:00"}));
				
				for(int i = 0; i < nrOfEvents ; i++)
				{
					Date eventDate = getDateRange(addDays(begginingDate, 7*(this.weekFlag -1)), addDays(begginingDate, 7*this.weekFlag));
					String dateString = new SimpleDateFormat("yyyy-MM-dd").format(eventDate); 
					
					EventBuilder builder = new EventBuilder();
					builder.addDate(dateString);
					builder.addLocation(locations);
					builder.addHour(times);
					builder.addFighterOne(fightersList);
					builder.addFighterTwo(fightersList);
					builder.addWeek(this.weekFlag);
					
					Event event = builder.build();
					System.out.println("Event Inserted = " + event);
					if(event.getFighterOne() == null || event.getFighterTwo() == null )
					{
						JOptionPane.showMessageDialog(null, "The schedule is finished");
						break;
					}
					else
					{
						this.maxFlag = this.weekFlag;
						eventBLL.getDAO().insert(event);
					}
						
				}
				
				ResultSet rs = eventBLL.getDAO().getEventsByWeek(this.weekFlag);
				eventsTable.setModel(DbUtils.resultSetToTableModel(rs));
		
			}

    } 

    private void previousWeekButtonMouseClicked(java.awt.event.MouseEvent evt) 
    {    
    	if(this.weekFlag == 1)
   		 this.weekFlag = 1;
    	else
    	 this.weekFlag --;
    	 
    	 Date minDate  = dateChooser.getDate();
		 if(minDate == null)
			 JOptionPane.showMessageDialog(null, "No starting date has been selcted");
		 else
		 {
			EventBLL eventBLL = new EventBLL();
			ResultSet rs = eventBLL.getDAO().getEventsByWeek(this.weekFlag);
			eventsTable.setModel(DbUtils.resultSetToTableModel(rs));
		 }
    }                                               

    private void nextWeekButtonMouseClicked(java.awt.event.MouseEvent evt)
    {       
    	if(this.weekFlag == this.maxFlag)
    		this.weekFlag = this.maxFlag;
    	else
    		this.weekFlag ++;
    	
    	Date minDate  = dateChooser.getDate();
		 if(minDate == null)
			 JOptionPane.showMessageDialog(null, "No starting date has been selcted");
		 else
		 {
			EventBLL eventBLL = new EventBLL();
			ResultSet rs = eventBLL.getDAO().getEventsByWeek(this.weekFlag);
			eventsTable.setModel(DbUtils.resultSetToTableModel(rs));
		 }
    }                                              

    private void testFightersButtonMouseClicked(java.awt.event.MouseEvent evt) 
    {   
    	Date date = this.getDateChooser().getDate();
	 	if(date == null)
	 		JOptionPane.showMessageDialog(null, "No starting date has been selected");
	 	else
	 	{
	 		CovidTestBLL covidTestBLL = new CovidTestBLL();
			FighterBLL fighterBLL = new FighterBLL();
			List<Fighter> fightersList = fighterBLL.getDAO().report();
			ArrayList<String> fightersIsolationList = new ArrayList<String>();
			
			for(Fighter f : fightersList)
			{
				covidTestBLL.generateRandomTestResult(f);
				fightersIsolationList.add(f.getInIsolation());
			}
			
			if(!fightersIsolationList.contains("Yes"))
			{
				System.out.println(fightersIsolationList);
				JOptionPane.showMessageDialog(null, "All the fighters are ready. The tournament can begin");
				generateScheduleButton.setVisible(true);
				testFightersButton.setVisible(false);
			}

			ResultSet rs = fighterBLL.getDAO().getFightersByDates();
			eventsTable.setModel(DbUtils.resultSetToTableModel(rs));
	 	}
    	
		
		
    }                                               

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Administrator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton closeButton;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JTable eventsTable;
    private javax.swing.JButton generateScheduleButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logo;
    private javax.swing.JButton nextWeekButton;
    private javax.swing.JButton previousWeekButton;
    private javax.swing.JButton sendInvitationsButton;
    private javax.swing.JButton testFightersButton;
    // End of variables declaration                   
}
